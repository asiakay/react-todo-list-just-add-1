{"version":3,"sources":["components/Header.js","components/Todo.js","components/List.js","components/AddTodo.js","App.js","reportWebVitals.js","index.js"],"names":["headerStyle","fontSize","textDecoration","Header","props","style","title","Todo","todo","item","List","todos","map","id","AddTodo","onAdd","useState","setItem","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","App","setTodos","className","Math","ceil","random","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAgBMA,EAAc,CAClBC,SAAU,OACVC,eAAgB,aAGHC,EAhBA,SAACC,GACd,OACE,8BACA,iCACE,oBAAIC,MAAOL,EAAX,SAAyBI,EAAME,aCQtBC,EAfC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OAOI,aANR,CAMQ,gBACI,6BAAKA,EAAKC,UCMPC,EAVC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACI,8BACGA,EAAMC,KAAI,SAACJ,GAAD,OACT,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKK,UCebC,EAxBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,EAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KASA,OACI,uBAAMC,SARO,SAACC,GACdA,EAAEC,iBACFL,EAAM,CAACN,SAEPQ,EAAQ,KAIR,UACI,8CACA,uBACII,KAAK,OACLC,YAAY,YACZC,MAAOd,EACPe,SAAW,SAACL,GAAD,OAAOF,EAAQE,EAAEM,OAAOF,UAEvC,uBAAOF,KAAK,SAASE,MAAM,iBC6CxBG,MAjDf,WAIE,MAA0BV,mBAAS,CAGjC,CACEH,GAAI,EACJJ,KAAM,eAER,CACEI,GAAI,EACJJ,KAAM,uBAER,CACEI,GAAI,EACJJ,KAAM,cAbV,mBAAOE,EAAP,KAAcgB,EAAd,KA+BA,OACE,sBAAKC,UAAU,YAAf,UACE,cAAC,EAAD,CAAQtB,MAAM,cAEd,cAAC,EAAD,CAASS,MAhBG,SAACP,GAGf,IAAMK,EAAKgB,KAAKC,KAAmB,IAAdD,KAAKE,UAGpBC,EAAO,aAAInB,MAAOL,GAGxBmB,EAAS,GAAD,mBAAKhB,GAAL,CAAYqB,QAUlB,cAAC,EAAD,CAAMrB,MAAOA,QC/CJsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d99ced8.chunk.js","sourcesContent":["import React from \"react\";\n\n/* // New Functional Component\nhas a div and H1 code and text. \n*/\nconst Header = (props) => {\n  return (\n    <div>\n    <header>\n      <h1 style={headerStyle}>{props.title}</h1>\n    </header>\n    </div>\n    \n  );\n};\n\nconst headerStyle = {\n  fontSize: \"40px\",\n  textDecoration: \"underline\",\n};\n\nexport default Header;\n","/* defining properties hook of \nFunction Todo\n */const Todo = ({ todo }) => {\n    return (\n/*         returning item property of Todo object \n            enclosed in a div                \n            wrapped in an <h2> tag</h2>\n            .item accesses the properties of\n            todo hook \n            */\n        <div>\n            <h2>{todo.item}</h2>\n        </div>\n    )\n}\n/* returns the item property of todo function object\n */\nexport default Todo\n\n","/* importing `Todo` returns \ncomponent property `item` */\nimport Todo from './Todo'\n/* anonymous function \nreturns id key, value property\n.map pairs the key/values in an array\n\n */const List = ({ todos }) => {\n    return (\n        <div>\n          {todos.map((todo) => \n            <Todo key={todo.id} todo={todo} />\n          )}  \n        </div>\n    )\n}\n\nexport default List\n\n","import { useState } from 'react'\n\nconst AddTodo = ({ onAdd }) => { \n    const [item, setItem] = useState('')\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        onAdd({item})\n\n        setItem('')\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Add Todo:</label>\n            <input \n                type=\"text\" \n                placeholder=\"Todo Item\"\n                value={item}\n                onChange={ (e) => setItem(e.target.value)}\n            /> \n            <input type=\"submit\" value=\"Add Todo\" />\n        </form>\n    )\n}\n\nexport default AddTodo\n","import { useState } from 'react'\n/* importing `{useState}` returns \na stateful value and \na function to update it */\n\nimport Header from \"./components/Header\";\n/* importing `Header` returns access to\ncomponent properties*/\n\nimport List from \"./components/List\"\n/* importing `List` returns access to\ncomponent properties */\n\nimport AddTodo from \"./components/AddTodo\"\n/* importing `AddTodo` returns access to\ncomponent properties*/\n\nfunction App() {\n  /* naming and defining scope of function */\n\n/*   defining new datastructure to useState */\n  const [todos, setTodos] = useState([\n    /* object with initial json values for state \n     */\n    {\n      id: 1,\n      item: \"Drink Water\",\n    },\n    {\n      id: 2,\n      item: \"Make Healthy Dinner\",\n    },\n    {\n      id: 3,\n      item: \"Exercise\",\n    },\n  ]);\n\n/* anonymous function  */\n\n  const addTodo = (todo) => {\n\n/* counting the highest number in the id array  */\n    const id = Math.ceil(Math.random()*100000)\n\n/*     adding new kv pair to newTodo object */\n    const newTodo = {id, ...todo}\n\n/*    calling set todo function */\n    setTodos([...todos, newTodo])\n  }\n\n  return (\n    <div className=\"container\">\n      <Header title=\"Todo List\" />\n      {/* updates the state of the Header comp through the addTodo props  */}\n      <AddTodo onAdd={addTodo} />\n      {/* updates the state of the AddTodo comp through the todos props  */}\n\n      <List todos={todos}/>\n      {/* updates the state of the AddTodo component*/}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}